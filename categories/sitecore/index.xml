<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sitecore on Ian&#39;s Blog</title>
    <link>http://bigredmachine.github.io/categories/sitecore/</link>
    <description>Recent content in Sitecore on Ian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://bigredmachine.github.io/categories/sitecore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Is Wrong With the Link Database</title>
      <link>http://bigredmachine.github.io/post/what-is-wrong-with-the-link-database/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/what-is-wrong-with-the-link-database/</guid>
      <description>Sitecore (Fast) Queries There&amp;rsquo;s quite a few blog posts on avoiding using (fast) Sitecore queries on Content Delivery.
 https://blog.rauljimenez.co.uk/not-so-fast/ https://intothecloud.blog/2018/10/21/It-s-time-to-put-fast-query-to-rest/ https://blog.coates.dk/2014/11/19/sitecore-fast-query-syntax-can-kill-your-sql-server-or-website/ http://intothecore.cassidy.dk/2016/05/sitecore-decennial-series-2-dont.html  Summary Fast always goes to the database, and even a normal Sitecore query can go from being a slow page, to bringing your site to it&amp;rsquo;s knees if that page is hit frequently enough.
I&amp;rsquo;ve had experience of this on inheriting a solution which would do three sitecore queries on a page load for calendar events, for items within a folder.</description>
    </item>
    
    <item>
      <title>Sitecore 9 Index Slow Down - fix</title>
      <link>http://bigredmachine.github.io/post/sitecore-9-index-slow-down/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/sitecore-9-index-slow-down/</guid>
      <description>Following an upgrade to Sitecore 9.0 update 2, from Sitecore 8.2 update 6, spotted that index rebuilds of the default indexes Core, Web &amp;amp; Master were taking much longer than they were before.
Talking to rebuild these 3 index in parallel under 50 mins in Sitecore 8.2, now taking over 6 hours in Sitecore 9 (sometime 20 hours+), for ~1&amp;frasl;4 million items in each of the web and master databases.</description>
    </item>
    
    <item>
      <title>Speeding up sitecore crawling</title>
      <link>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</guid>
      <description>Recently I was looking at building a sitecore search domain index (See Domain vs God index), which had quite a few calculated fields. Lots of the calculated fields were based off similar information about the parent nodes of the current item. And for each calculated field I was performing the same look ups again and again per field on the item.
I thought there has got to be a way to improve this, and found a forum post back from 2015 of someone asking the same question, and with a response of someone else who had solved it for one of the projects they were working on.</description>
    </item>
    
  </channel>
</rss>
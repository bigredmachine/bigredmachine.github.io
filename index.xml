<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ian&#39;s Blog on Ian&#39;s Blog</title>
    <link>http://bigredmachine.github.io/</link>
    <description>Recent content in Ian&#39;s Blog on Ian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Feb 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>Speeding up sitecore crawling</title>
            <link>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</link>
            <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
            
            <guid>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</guid>
            <description>

&lt;p&gt;Recently I was looking at building a sitecore search domain index (&lt;a href=&#34;http://jockstothecore.com/indexing-patterns-in-sitecore/&#34;&gt;See Domain vs God index&lt;/a&gt;), which had quite a few calculated fields.
Lots of the calculated fields were based off similar information about the parent nodes of the current item.  And for each calculated field I was performing the same look ups again and again per field on the item.&lt;/p&gt;

&lt;p&gt;I thought there has got to be a way to improve this, and found a forum post back from 2015 of someone asking the same question, and with a response of someone else who had solved it for one of the projects they were working on.
&lt;a href=&#34;https://community.sitecore.net/developers/f/8/t/447&#34;&gt;Indexing multiple fields at same time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the given answer it seems quite easy to override this method in the DocumentBuilder.&lt;br /&gt;
However using DotPeek it would appear somewhere since 2015 and Sitecore 8.2 update 6 the method which contains the logic I want to override has been made private, quite possibly when parallel indexing was introduced. As now the code forks in two, and both reference a private method which contains the logic I want to overwrite.&lt;br /&gt;
And that private method calls another private method. :/&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/privatemethods_hu333a231650a89337d8b12118ae66727f_69435_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/privatemethods_hu333a231650a89337d8b12118ae66727f_69435_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/privatemethods_hu333a231650a89337d8b12118ae66727f_69435_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Private methods&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Until Sitecore add in (or add back in) the extensibility points I need,&lt;br /&gt;
It&amp;rsquo;s Reflection to the rescue.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/reflectallthethings_hueb28d54a3034254c23bfbe334291da48_72632_650x0_resize_q100_box.jpg&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/reflectallthethings_hueb28d54a3034254c23bfbe334291da48_72632_465x0_resize_q100_box.jpg&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/post/speeding-up-sitecore-crawling/reflectallthethings_hueb28d54a3034254c23bfbe334291da48_72632_300x0_resize_q100_box.jpg&#34; 
    alt=&#34;Reflect all the things&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;But reflection is slow, so let&amp;rsquo;s improve that performance by using Delegates (&lt;a href=&#34;https://jeremybytes.blogspot.co.uk/2014/01/improving-reflection-performance-with.html&#34;&gt;Improving Reflection Performance with Delegates&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Edit - it appears the SolrDocumentBuilder isn&amp;rsquo;t a Singleton, so moved reflection from constructor into a static constructor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using Sitecore.ContentSearch;
using Sitecore.ContentSearch.ComputedFields;
using Sitecore.ContentSearch.Diagnostics;
using Sitecore.ContentSearch.SolrProvider;
using Sitecore.Diagnostics;

public class SolrDocumentBuilderCustom : SolrDocumentBuilder
{
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddFieldDelegate(SolrDocumentBuilder documentBuilder, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; fieldName, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; fieldValue, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; returnType);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; AddFieldDelegate _addFieldDelegate;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; SolrDocumentBuilderCustom()
	{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; solrDocumentBuilderType = &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(SolrDocumentBuilder);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; addFieldMethod = &lt;span style=&#34;color:#a6e22e&#34;&gt;solrDocumentBuilderType&lt;/span&gt;.GetMethod(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AddField&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;BindingFlags&lt;/span&gt;.Instance | &lt;span style=&#34;color:#a6e22e&#34;&gt;BindingFlags&lt;/span&gt;.NonPublic,
            &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[]&lt;/span&gt;
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;),
                &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;),
                &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
            },
            &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

        _addFieldDelegate = (AddFieldDelegate)&lt;span style=&#34;color:#a6e22e&#34;&gt;Delegate&lt;/span&gt;.CreateDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(AddFieldDelegate), addFieldMethod);
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

    public SolrDocumentBuilderCustom(IIndexable indexable, IProviderUpdateContext context) : base(indexable, context)
    {
    }

    public override void AddComputedIndexFields()
    {
        if (this.IsParallelComputedFieldsProcessing)
            this.AddComputedIndexFieldsInParallel();
        else
            this.AddComputedIndexFieldsInSequence();
    }

    protected override void AddComputedIndexFieldsInParallel()
    {
        ConcurrentQueue&amp;lt;Exception&amp;gt; exceptions = new ConcurrentQueue&amp;lt;Exception&amp;gt;();
        this.ParallelForeachProxy.ForEach&amp;lt;IComputedIndexField&amp;gt;((IEnumerable&amp;lt;IComputedIndexField&amp;gt;)this.Options.ComputedIndexFields, this.ParallelOptions, (Action&amp;lt;IComputedIndexField, ParallelLoopState&amp;gt;)((field, parallelLoopState) =&amp;gt; this.AddComputedIndexField(field, parallelLoopState, exceptions)));
        if (!exceptions.IsEmpty)
            throw new AggregateException((IEnumerable&amp;lt;Exception&amp;gt;)exceptions);
    }

    protected override void AddComputedIndexFieldsInSequence()
    {
        foreach (IComputedIndexField computedIndexField in this.Options.ComputedIndexFields)
            this.AddComputedIndexField(computedIndexField, (ParallelLoopState)null, (ConcurrentQueue&amp;lt;Exception&amp;gt;)null);
    }

    private new void AddComputedIndexField(IComputedIndexField computedIndexField, ParallelLoopState parallelLoopState = null, ConcurrentQueue&amp;lt;Exception&amp;gt; exceptions = null)
    {
        Assert.ArgumentNotNull((object)computedIndexField, nameof(computedIndexField));
        object fieldValue;
        try
        {
            fieldValue = computedIndexField.ComputeFieldValue(this.Indexable);
        }
        catch (Exception ex)
        {
            CrawlingLog.Log.Warn(string.Format(&amp;quot;Could not compute value for ComputedIndexField: {0} for indexable: {1}&amp;quot;, (object)computedIndexField.FieldName, (object)this.Indexable.UniqueId), ex);
            if (!this.Settings.StopOnCrawlFieldError())
                return;
            if (parallelLoopState != null)
            {
                parallelLoopState.Stop();
                exceptions.Enqueue(ex);
                return;
            }
            throw;
        }

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fieldValue &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; List&amp;lt;Tuple&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fieldValues = fieldValue &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; List&amp;lt;Tuple&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fieldValues&lt;/span&gt;.Count &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; field &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; fieldValues)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item3) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#a6e22e&#34;&gt;Index&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AllFieldNames&lt;/span&gt;.Contains(&lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item1))
                {
                    _addFieldDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item1, &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item2, &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item3);
                }
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                {
                    AddField(&lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item1, &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;.Item2, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
                }
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            if (!string.IsNullOrEmpty(computedIndexField.ReturnType) &amp;amp;&amp;amp;
                !this.Index.Schema.AllFieldNames.Contains(computedIndexField.FieldName))
            {
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;                _addFieldDelegate(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;computedIndexField&lt;/span&gt;.FieldName, fieldValue, &lt;span style=&#34;color:#a6e22e&#34;&gt;computedIndexField&lt;/span&gt;.ReturnType);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            }
            else
            {
                this.AddField(computedIndexField.FieldName, fieldValue, true);
            }
        }    
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then (as per the forum post referenced) return a List of Tuple&amp;rsquo;s from you computed index field, which all get added to the index in one go, without having to re-process shared logic for each field (assuming you have any).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = new List&amp;lt;Tuple&amp;lt;string, object, string&amp;gt;&amp;gt;
        {
            new Tuple&amp;lt;string, object, string&amp;gt;(&amp;quot;solrfield1&amp;quot;, value1, &amp;quot;stringCollection&amp;quot;),
            new Tuple&amp;lt;string, object, string&amp;gt;(&amp;quot;solrfield2&amp;quot;, value2, &amp;quot;stringCollection&amp;quot;),
            new Tuple&amp;lt;string, object, string&amp;gt;(&amp;quot;solrfield3&amp;quot;, value3, &amp;quot;stringCollection&amp;quot;)
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;end-result&#34;&gt;End Result&lt;/h2&gt;

&lt;p&gt;For my particular case with over 10+ calculated fields which could be combined,&lt;br /&gt;
I got index rebuild time down from &lt;strong&gt;1 hour &amp;amp; 8 mins&lt;/strong&gt; down to &lt;strong&gt;22 mins&lt;/strong&gt; on my local dev machine.&lt;/p&gt;

&lt;p&gt;I then went on further to improve index rebuild times, by restricting which part of the tree the domain index crawls.&lt;/p&gt;

&lt;p&gt;Seems I&amp;rsquo;m not the only one who&amp;rsquo;s indexes can benefit from this, and hopefully either sitecore will add support for this, or make it easier to extend again in the future without nasty reflection.&lt;/p&gt;

&lt;p&gt;Happy Sitecoring!&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Logic App, Azure Function, Get Tweets Sentiment and Aggregate into an email</title>
            <link>http://bigredmachine.github.io/post/logic-app-azure-function-twitter/</link>
            <pubDate>Fri, 09 Feb 2018 20:49:38 +0000</pubDate>
            
            <guid>http://bigredmachine.github.io/post/logic-app-azure-function-twitter/</guid>
            <description>

&lt;h4 id=&#34;fun-with-logic-apps-azure-functions-and-twitter&#34;&gt;Fun with logic apps, Azure functions and twitter&lt;/h4&gt;

&lt;p&gt;While studying for the Microsoft 70-532 exam,
I wanted to take a look at Azure functions &amp;amp; Logics apps.&lt;/p&gt;

&lt;p&gt;Having gone through this example
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-twitter-email&#34;&gt;&amp;ldquo;Create a function that integrates with Azure Logic Apps&amp;rdquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It left me with some questions on how to improve it. E.g. I don&amp;rsquo;t want to receive an email per tweet.&lt;/p&gt;

&lt;p&gt;So after some searching, I came across a new feature called batching
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-batch-process-send-receive-messages&#34;&gt;&amp;ldquo;Send, receive, and batch process messages in logic apps&amp;rdquo;&lt;/a&gt;
but even after the batch had been reached,
each message in the batch would result in an individual email.

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/batch_foreach_email_hu6c91b4ee33202a2153ae8e173ab1b9dd_79702_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/batch_foreach_email_hu6c91b4ee33202a2153ae8e173ab1b9dd_79702_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/batch_foreach_email_hu6c91b4ee33202a2153ae8e173ab1b9dd_79702_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Logic apps Compose&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;Then I came across this blog
&lt;a href=&#34;http://www.fortuvis.com/blog/azure-logic-apps-aggregate-an-array-of-messages-into-a-single-message/&#34;&gt;&amp;ldquo;Azure Logic Apps – Aggregate a value from an array of messages&amp;rdquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the Compose feature was what I wanted.
Composing first the message I want out of each tweet.
Then combining those messages together, into the format I want to email.&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/Compose_hu655fd6c1f8e5e0b9d2e85df444d29929_32159_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/Compose_hu655fd6c1f8e5e0b9d2e85df444d29929_32159_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/Compose_hu655fd6c1f8e5e0b9d2e85df444d29929_32159_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Logic apps Compose&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;I also wanted to make some improvements, to not get retweets, and filter tweets to the right language
&lt;a href=&#34;https://stackoverflow.com/questions/27941940/how-to-exclude-retweets-and-replies-in-a-search-api/29129134#29129134&#34;&gt;&amp;ldquo;How to Exclude retweets and replies in a search api&amp;rdquo;&lt;/a&gt;
&lt;a href=&#34;http://thesocialchic.com/2013/04/26/how-to-master-twitter-search/&#34;&gt;&amp;ldquo;How to master twitter search&amp;rdquo;&lt;/a&gt;&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/SearchTweets_hu6589f3a1df9249ba3158c4cdda43ff46_8510_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/SearchTweets_hu6589f3a1df9249ba3158c4cdda43ff46_8510_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/SearchTweets_hu6589f3a1df9249ba3158c4cdda43ff46_8510_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Search Tweets&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;And here is the final result, twitter search result of original tweets filtered by language combined into a single email

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/CombineEmail_hufd4d80ba59d84d0fa5059d14f0ccaf3d_69392_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/CombineEmail_hufd4d80ba59d84d0fa5059d14f0ccaf3d_69392_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/logic-app-azure-function-twitter/post/logic-app-azure-function-twitter/CombineEmail_hufd4d80ba59d84d0fa5059d14f0ccaf3d_69392_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Combined Email&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>updating to Visual Studio 2015 RC</title>
            <link>http://bigredmachine.github.io/post/updating-to-vs-rc/</link>
            <pubDate>Mon, 25 May 2015 16:18:02 +0000</pubDate>
            
            <guid>http://bigredmachine.github.io/post/updating-to-vs-rc/</guid>
            <description>

&lt;h4 id=&#34;updating-from-vs2015-ctp6-to-rc&#34;&gt;Updating from VS2015 CTP6 to RC&lt;/h4&gt;

&lt;p&gt;A number of changes have been made to names.&lt;/p&gt;

&lt;p&gt;Watch this for further details:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-qt0POsiAF8&#34;&gt;Video: ASP.NET 5 Community Standup - Mar 10th, 2015 - The Big Rename&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key slides:&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/CommandLineToolsRename_hu9f0f6a4f93f47a1a01ddea18d7fbdbeb_417069_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/CommandLineToolsRename_hu9f0f6a4f93f47a1a01ddea18d7fbdbeb_417069_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/CommandLineToolsRename_hu9f0f6a4f93f47a1a01ddea18d7fbdbeb_417069_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Renamed tools&#34;&gt;
&lt;/picture&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/FolderAndPackageNameRename_hu37446918ceb0d4c1dbb954c4b4dafb5a_516859_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/FolderAndPackageNameRename_hu37446918ceb0d4c1dbb954c4b4dafb5a_516859_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/updating-to-vs-rc/post/updating-to-vs-rc/FolderAndPackageNameRename_hu37446918ceb0d4c1dbb954c4b4dafb5a_516859_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Renamed folder and packages&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;If you install visual studio, the DNVM and DNX will be setup for you.&lt;br /&gt;
To install Visual Studio RC, first uninstall visual studio CTP 6.&lt;br /&gt;
If you aren&amp;rsquo;t installing visual studio, and want to use the command line to install .NET Version Manager (DNVM) run the following command, you&amp;rsquo;ll need Powershell V3 for this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;&amp;amp;{$Branch=&#39;dev&#39;;iex ((new-object net.webclient).DownloadString(&#39;https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1&#39;))}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to install .NET Execution Environment (DNX) run the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got some warnings, to remove the old environmental variable KRE_HOME&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING: Found a KRE_HOME environment variable. This variable has been deprecated and should be removed, or it may interfere with DNVM and the .NET Execution environment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To see what is installed, and what is the default run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the coreclr to be used run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnvm use 1.0.0-beta4 -x64 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to run the web server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnx . web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When running &amp;ldquo;dnx &amp;ndash;watch . web&amp;rdquo; from the command line, when any code changes are made, the server will stop, but not restart.&lt;br /&gt;
In order to get the server to restart after a code change something like this is needed.&lt;br /&gt;
When using visual studio this is all handled for you.&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;for(;;) { Write-Output \&amp;quot;Starting...\&amp;quot;; dnx --watch . web }&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>setting up Visual Studio 2015 CTP 6</title>
            <link>http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/</link>
            <pubDate>Sun, 08 Mar 2015 11:28:58 +0000</pubDate>
            
            <guid>http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/</guid>
            <description>

&lt;h4 id=&#34;goals&#34;&gt;Goals&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;To setup Visual Studio 2015 to run an asp.net vNext website&lt;/li&gt;
&lt;li&gt;Rather than using an Azure pre-configured VM, I wanted to setup Visual Studio on my own hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;how-to-do-it-what-i-learnt&#34;&gt;How to do it/What I learnt&lt;/h4&gt;

&lt;p&gt;Reading the &lt;a href=&#34;https://www.visualstudio.com/en-us/downloads/visual-studio-2015-ctp-vs&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Visual Studio 2015 CTPs are for testing and feedback purposes only. This release is unsupported and are not intended for use on production computers, or to create production code. We strongly recommend only installing this release in a virtual machine, or on a computer that is available for reformatting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a VM should be used.
So I downloaded Microsoft Virtual PC, only to remember when the VM tried to boot up that it doesn&amp;rsquo;t work on 64 bit PCs.
So starting again, I downloaded &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then &lt;a href=&#34;http://www.howtogeek.com/forum/topic/how-to-install-windows-7-in-virtualbox-guide-hatryst&#34;&gt;created a Windows 7 VM in VirtualBox&lt;/a&gt;.&lt;br/&gt;
Important Steps, create it with enough space, e.g. 50GB+. It&amp;rsquo;s surprising how much space need for Windows &amp;amp; Patching, as well as Visual Studio 2015.&lt;br/&gt;
In fact to start with I allocated too little space, and had to change the amount of space the VM had allocated, as run out of space while patching the VM.&lt;/p&gt;

&lt;p&gt;Here is good article if need to &lt;a href=&#34;http://hajuria.blogspot.co.uk/2013/12/how-to-increase-virtualbox-disk-size-in.html&#34;&gt;change the space on the Virtual Box VM&lt;/a&gt;, and update windows to use the extra space.&lt;br/&gt;
The first steps about cloning are optional.&lt;br/&gt;
The important steps are, after having turned off the VM, to issue the following command to change the hard drive size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VBoxManage modifyhd &amp;quot;VMName.vdi&amp;quot; --resize 50000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then after boot it back up again, to go into Control Panel, Administrative Tools, Computer Management, Disk Management, select the active partition want to expand, right click and select &amp;ldquo;Extend Volume..&amp;rdquo;, and allocate the extra space.&lt;/p&gt;

&lt;p&gt;Now you&amp;rsquo;ve got a Windows 7 VM, few important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Patch it to include SP1&lt;/li&gt;
&lt;li&gt;Patch it to include IE10/IE11&lt;/li&gt;
&lt;li&gt;Just patch it up to the latest version &amp;amp; reboot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don&amp;rsquo;t patch it to SP1, then won&amp;rsquo;t be able to install Visual Studio.&lt;br /&gt;
And if you don&amp;rsquo;t patch it to IE10/IE11, which you get a warning for which I ignored to begin with, I found Visual Studio wouldn&amp;rsquo;t load the K runtime/allow you to debug or browse an ASP.NET vNext website. I end up on this &lt;a href=&#34;http://forums.asp.net/t/2012309.aspx?Could+not+find+the+Microsoft+AspNet+Loader+Interop&#34;&gt;forum thread&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Summary just patch your VM to the latest version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having got a Patched VM, with enough disk space.
Then install Visual Studio 2015 CTP 6.
I used the &lt;a href=&#34;https://www.visualstudio.com/en-us/downloads/visual-studio-2015-ctp-vs&#34;&gt;Visual Studio 2015 Ultimate Web Installer&lt;/a&gt; released on 23rd of February 2015.
And just installed the default options.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also want to install the K runtime.&lt;br /&gt;
First install the K Version Manager(KVM) in Powershell as an administrator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.ps1&#39;))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As detailed on the &lt;a href=&#34;https://github.com/aspnet/home&#34;&gt;Asp.net Github page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now KVM is installed, you&amp;rsquo;ll want to get the K runtime.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kvm upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having done that you can see what is installed by calling&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something like:&lt;br /&gt;

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/KVM_Versions_huaca018867a77d2548040c5eaf4f82f30_5214_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/KVM_Versions_huaca018867a77d2548040c5eaf4f82f30_5214_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/KVM_Versions_huaca018867a77d2548040c5eaf4f82f30_5214_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;KVM list&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;Notice is used the \.k\ folder, earlier version where using \.kre\.
You may read older documentation that refers to \.kre\.&lt;/p&gt;

&lt;p&gt;You may want to look at switching to use the coreclr runtime as the Active version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kvm use 1.0.0-beta3 -x64 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;followed by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something like, notice the Active * has now updated:&lt;br /&gt;

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/SwitchKActiveVersion_hub986e95702ace9166869ed9cda6cc41e_7789_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/SwitchKActiveVersion_hub986e95702ace9166869ed9cda6cc41e_7789_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/SwitchKActiveVersion_hub986e95702ace9166869ed9cda6cc41e_7789_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;KVM list&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;Now you&amp;rsquo;ve got a VM, K runtime setup.&lt;/p&gt;

&lt;p&gt;Open up visual studio and create a new project.&lt;br /&gt;

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectCreate_hu5e52fb8690e9682e1d4365a1477e305b_13874_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectCreate_hu5e52fb8690e9682e1d4365a1477e305b_13874_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectCreate_hu5e52fb8690e9682e1d4365a1477e305b_13874_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Visual Studio Create Project&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;Select a blank project&lt;br /&gt;

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectTemplate_hu7b6ef11047c737de506b824ae8665e22_24043_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectTemplate_hu7b6ef11047c737de506b824ae8665e22_24043_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VsProjectTemplate_hu7b6ef11047c737de506b824ae8665e22_24043_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Select blank project&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;Now have that created, let&amp;rsquo;s setup the welcome page for ASP.net Vnext. Open startup.cs, and add the following line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.UseWelcomePage();
&lt;/code&gt;&lt;/pre&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureWelcomePage_hu7c5b47c6a14c418effb700043faba1eb_8209_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureWelcomePage_hu7c5b47c6a14c418effb700043faba1eb_8209_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureWelcomePage_hu7c5b47c6a14c418effb700043faba1eb_8209_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Modify startup.cs&#34;&gt;
&lt;/picture&gt;

&lt;p&gt;This won&amp;rsquo;t compile at the moment as you don&amp;rsquo;t have a reference to the extension method.&lt;/p&gt;

&lt;p&gt;To do that open project.json, and add a reference to &amp;ldquo;Microsoft.AspNet.Diagnostics&amp;rdquo;: &amp;ldquo;1.0.0-beta3&amp;rdquo;
I&amp;rsquo;ve also added some references to &amp;ldquo;Microsoft.AspNet.Hosting&amp;rdquo; &amp;amp; &amp;ldquo;Microsoft.AspNet.Server.WebListener&amp;rdquo;, and added the command &amp;ldquo;web&amp;rdquo;, so can launch the site from the command prompt.

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureDependancies_hucc4eafc377257bc3fa9187ff9e8dadcc_22658_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureDependancies_hucc4eafc377257bc3fa9187ff9e8dadcc_22658_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/ConfigureDependancies_hucc4eafc377257bc3fa9187ff9e8dadcc_22658_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Modify project.json&#34;&gt;
&lt;/picture&gt;
&lt;br/&gt;
Make sure the version of k runtime in the project.json matches what you have installed, e.g. &amp;ldquo;1.0.0-beta3&amp;rdquo;.
When you save the file, visual studio should automatically restore the packages from NuGet.&lt;/p&gt;

&lt;p&gt;In visual studio you can configure which version of K the application uses

&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VSConfigureKREversion_hu2f8e938c67e6060011faa8f030b9b7e8_12516_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VSConfigureKREversion_hu2f8e938c67e6060011faa8f030b9b7e8_12516_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/VSConfigureKREversion_hu2f8e938c67e6060011faa8f030b9b7e8_12516_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;VS configure KRE version&#34;&gt;
&lt;/picture&gt;&lt;/p&gt;

&lt;p&gt;You should either now be able to launch the site from either Visual Studio or Command prompt.&lt;/p&gt;

&lt;p&gt;To start the site via command prompt, navigate to the website directory, and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;k web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can navigate to the site as defined in the project.json configuration&lt;/p&gt;


&lt;picture&gt;

  &lt;source 
    media=&#34;(min-width: 650px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/StartupPage_hu9ca5b64a4d40b23613bf0b7a4fe23973_65000_650x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;source 
    media=&#34;(min-width: 465px)&#34;
    srcset=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/StartupPage_hu9ca5b64a4d40b23613bf0b7a4fe23973_65000_465x0_resize_q100_box.PNG&#34;&gt;
	
  &lt;img 
    src=&#34;http://bigredmachine.github.io/post/setting-up-visual-studio-2015-ctp-6/post/setting-up-visual-studio-2015-ctp-6/StartupPage_hu9ca5b64a4d40b23613bf0b7a4fe23973_65000_300x0_resize_q100_box.PNG&#34; 
    alt=&#34;Startup Page&#34;&gt;
&lt;/picture&gt;
</description>
          </item>
        
      
    
      
    
  </channel>
</rss>

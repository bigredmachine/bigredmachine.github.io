<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sitecore on Ian&#39;s Blog</title>
    <link>http://bigredmachine.github.io/tags/sitecore/</link>
    <description>Recent content in Sitecore on Ian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://bigredmachine.github.io/tags/sitecore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java goes commercial, what does this mean for Sitecore - Solr?</title>
      <link>http://bigredmachine.github.io/post/java-comercial-sitecore-solr-future/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/java-comercial-sitecore-solr-future/</guid>
      <description>Oracle to start charging for Java I&amp;rsquo;ve been following this update for Java for many months since initally seeing the popup warning when updating Java on my local machine. And now finally getting around to blog about it, now the options have become clearer. And finding that some people still aren&amp;rsquo;t aware about the pending update in January 2019 that will mean will require a commercial Java licence if you want any further security updates from the Oracle version of Java.</description>
    </item>
    
    <item>
      <title>Why Sticky Session on Sitecore Content Authoring</title>
      <link>http://bigredmachine.github.io/post/why-inproc-session-state-required-on-authoring/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/why-inproc-session-state-required-on-authoring/</guid>
      <description>Why have to use InProc session state on Sitecore Content Authoring A note on why InProc session state &amp;amp; sticky sessions must be used for Sitecore Content Authoring. The official Sitecore documentation was mentioning that Content Authoring could use a shared session state provider, but after testing, and being in contact with Sitecore support this documentation was update to reflect reality at the moment.
https://kb.sitecore.net/articles/860809
Bad Practice to use Sticky Sessions A quick intro on why Sticky Sessions are bad.</description>
    </item>
    
    <item>
      <title>Zero down time for Delivery &amp; Authoring</title>
      <link>http://bigredmachine.github.io/post/zero-content-authoring-down-time/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/zero-content-authoring-down-time/</guid>
      <description>Zero down time for Delivery &amp;amp; Authoring A lot of people talk about zero downtime, but normally just in the context of Content Delivery. Either with Azure PAAS websites and swapping slots, or using Azure Traffic Manager to switch over to a different load balancer/set of VMs.
However one of my colleagues found this article, to achieve Zero* downtime for Content Authoring.
https://sitecorepocs.blogspot.com/2016/06/sitecore-zero-downtime-deployments.html
*Or as near to Zero as possible as the users Session state will expire, as Sitecore requires InProc session state provider on Content Authoring.</description>
    </item>
    
    <item>
      <title>What Is Wrong With the Link Database</title>
      <link>http://bigredmachine.github.io/post/what-is-wrong-with-the-link-database/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/what-is-wrong-with-the-link-database/</guid>
      <description>Sitecore (Fast) Queries There&amp;rsquo;s quite a few blog posts on avoiding using (fast) Sitecore queries on Content Delivery.
 https://blog.rauljimenez.co.uk/not-so-fast/ https://intothecloud.blog/2018/10/21/It-s-time-to-put-fast-query-to-rest/ https://blog.coates.dk/2014/11/19/sitecore-fast-query-syntax-can-kill-your-sql-server-or-website/ http://intothecore.cassidy.dk/2016/05/sitecore-decennial-series-2-dont.html  Summary Fast always goes to the database, and even a normal Sitecore query can go from being a slow page, to bringing your site to it&amp;rsquo;s knees if that page is hit frequently enough.
I&amp;rsquo;ve had experience of this on inheriting a solution which would do three sitecore queries on a page load for calendar events, for items within a folder.</description>
    </item>
    
    <item>
      <title>Sitecore 9 Index Slow Down - fix</title>
      <link>http://bigredmachine.github.io/post/sitecore-9-index-slow-down/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/sitecore-9-index-slow-down/</guid>
      <description>Following an upgrade to Sitecore 9.0 update 2, from Sitecore 8.2 update 6, spotted that index rebuilds of the default indexes Core, Web &amp;amp; Master were taking much longer than they were before.
Talking to rebuild these 3 index in parallel under 50 mins in Sitecore 8.2, now taking over 6 hours in Sitecore 9 (sometime 20 hours+), for ~1&amp;frasl;4 million items in each of the web and master databases.</description>
    </item>
    
    <item>
      <title>Speeding up sitecore crawling</title>
      <link>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bigredmachine.github.io/post/speeding-up-sitecore-crawling/</guid>
      <description>Recently I was looking at building a sitecore search domain index (See Domain vs God index), which had quite a few calculated fields. Lots of the calculated fields were based off similar information about the parent nodes of the current item. And for each calculated field I was performing the same look ups again and again per field on the item.
I thought there has got to be a way to improve this, and found a forum post back from 2015 of someone asking the same question, and with a response of someone else who had solved it for one of the projects they were working on.</description>
    </item>
    
  </channel>
</rss>